// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Crowdfunding {
    struct Organization {
        string name;
        string description;
        uint fundGoal; // Meta de fondos en wei
        uint balance; // Balance actual en wei
    }

    address public owner;
    Organization[] public organizations;

    modifier onlyOwner() {
        require(msg.sender == owner, "Solo el owner puede realizar esta accion.");
        _;
    }

    event OrganizationAdded(string name, string description, uint fundGoal);
    event DonationReceived(uint index, address donor, uint amount);
    event OrganizationEdited(uint index, string newName, string newDescription, uint newFundGoal);
    event FundsWithdrawn(address to, uint amount);

    constructor() {
        owner = msg.sender;
    }

    // Agregar una nueva organización
    function addOrganization(
        string memory _name,
        string memory _description,
        uint _fundGoal
    ) public onlyOwner {
        require(bytes(_name).length > 0, "El nombre no puede estar vacio.");
        require(bytes(_description).length > 0, "La descripcion no puede estar vacia.");
        require(_fundGoal > 0, "La meta de fondos debe ser mayor a cero.");

        organizations.push(Organization({
            name: _name,
            description: _description,
            fundGoal: _fundGoal,
            balance: 0
        }));

        emit OrganizationAdded(_name, _description, _fundGoal);
    }

    // Donar a una organización
    function donate(uint _index) public payable {
        require(_index < organizations.length, "Organizacion no valida.");
        Organization storage org = organizations[_index];

        require(msg.value > 0, "La cantidad de la donacion debe ser mayor a cero.");
        require(org.balance < org.fundGoal, "La meta de fondos ya ha sido alcanzada.");

        org.balance += msg.value;

        emit DonationReceived(_index, msg.sender, msg.value);
    }

    // Editar los datos de una organización
    function editOrganization(
        uint _index,
        string memory _newName,
        string memory _newDescription,
        uint _newFundGoal
    ) public onlyOwner {
        require(_index < organizations.length, "Organizacion no valida.");
        Organization storage org = organizations[_index];

        require(org.balance < org.fundGoal, "No se puede editar una organizacion finalizada.");

        require(bytes(_newName).length > 0, "El nombre no puede estar vacio.");
        require(bytes(_newDescription).length > 0, "La descripcion no puede estar vacia.");
        require(_newFundGoal > 0, "La meta de fondos debe ser mayor a cero.");

        org.name = _newName;
        org.description = _newDescription;
        org.fundGoal = _newFundGoal;

        emit OrganizationEdited(_index, _newName, _newDescription, _newFundGoal);
    }

    // Retirar fondos acumulados (solo el owner)
    function withdrawFunds() public onlyOwner {
        uint contractBalance = address(this).balance;
        require(contractBalance > 0, "No hay fondos para retirar.");

        payable(owner).transfer(contractBalance);

        emit FundsWithdrawn(owner, contractBalance);
    }

    // Obtener el total de organizaciones
    function getOrganizations() public view returns (Organization[] memory) {
        return organizations;
    }

    function deleteOrganization(uint _index) public onlyOwner {
    require(_index < organizations.length, "Index fuera de rango");
    
    for (uint i = _index; i < organizations.length - 1; i++) {
        organizations[i] = organizations[i + 1];
    }
    
    organizations.pop(); // Elimina el último elemento
    }

}
