// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Crowdfunding {
    address public owner;
    uint public totalFunds;

    struct Organization {
        string name;
        uint balance;
        string description;  // Nueva descripción
        uint fundGoal;       // Nueva meta de fondos
    }
    
    Organization[] public organizations;

    // Evento que se emite cada vez que se agrega una organización
    event OrganizationAdded(string name, string description, uint fundGoal);    
    // Evento que se emite cada vez que se reciben fondos
    event FundsReceived(address indexed donor, uint amount);
    // Evento para rastrear donaciones a organizaciones específicas
    event OrganizationFunded(uint orgIndex, address indexed donor, uint amount);

    // Modificador para permitir sólo al propietario ejecutar ciertas funciones
    modifier onlyOwner() {
        require(msg.sender == owner, "Solo el propietario puede ejecutar esta funcion");
        _;
    }

    // Constructor que inicializa el contrato con el propietario
    constructor() {
        owner = msg.sender;
    }

    mapping(address => uint) public contributions;

    // Nueva función para donar a una organización específica
    function donate(uint orgIndex) public payable {
        require(orgIndex < organizations.length, "Indice de organizacion invalido");
        require(msg.value > 0, "Debe enviar algo de ETH");

        // Incrementar el balance de la organización seleccionada
        organizations[orgIndex].balance += msg.value;

        // Registrar la contribución del donante
        contributions[msg.sender] += msg.value;

        // Incrementar el total de fondos del contrato
        totalFunds += msg.value;

        // Emitir eventos
        emit FundsReceived(msg.sender, msg.value);
        emit OrganizationFunded(orgIndex, msg.sender, msg.value);
    }
    
    // Función para enviar fondos al contrato (sin organización específica)
    function sendFunds() public payable {
        require(msg.value > 0, "Se debe enviar un monto mayor a cero");
        totalFunds += msg.value;
        emit FundsReceived(msg.sender, msg.value);
    }

    // Función para ver el balance total de fondos recaudados
    function getBalance() public view returns (uint) {
        return totalFunds;
    }

    // Función para que el propietario retire los fondos acumulados
    function withdrawFunds() public onlyOwner {
        require(totalFunds > 0, "No hay fondos para retirar");
        payable(owner).transfer(totalFunds);
        totalFunds = 0;
    }

    // Nueva función para agregar una organización
    function addOrganization(string memory _name, string memory _description, uint _fundGoal) public onlyOwner {
        organizations.push(Organization({
            name: _name,
            description: _description,
            fundGoal: _fundGoal,
            balance: 0
        }));

        emit OrganizationAdded(_name, _description, _fundGoal);
    }

    // Esta función devuelve la lista de organizaciones
    function getOrganizations() public view returns (Organization[] memory) {
        return organizations;
    }
}
